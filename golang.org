#+TITLE: golang notes
#+AUTHOR: kumakichi

* cross compile

** GOOS and GOARCH

#+BEGIN_SRC kumakichi
OS                   ARCH                          OS version
linux                386 / amd64 / arm             >= Linux 2.6
darwin               386 / amd64                   OS X (Snow Leopard + Lion)
freebsd              386 / amd64                   >= FreeBSD 7
windows              386 / amd64                   >= Windows 2000
#+END_SRC

** for non-arm architecture

*** for linux

**** check target architecture

#+BEGIN_SRC sh
  uname -a
#+END_SRC

x86_64 -> amd64

i386 -> 386

**** compile

#+BEGIN_SRC sh
  CGO_ENABLED=1 GOOS=linux GOARCH=amd64 ./make.bash --no-clean
#+END_SRC

*** for windows on linux

[[http://www.limitlessfx.com/cross-compile-golang-app-for-windows-from-linux.html][HOWTO: CROSS-COMPILE A GO APP FOR WINDOWS FROM LINUX]]

**** install mingw-w64

if your host machine runs Ubuntu, use

#+BEGIN_SRC sh
  sudo apt-get install mingw-w64
#+END_SRC

**** compile

for 386:

#+BEGIN_SRC sh
  cd $GOROOT/src
  CGO_ENABLED=1 GOOS=windows GOARCH=386 CC_FOR_TARGET="i686-w64-mingw32-gcc -fno-stack-protector -D_FORTIFY_SOURCE=0 -lssp" ./make.bash --no-clean
#+END_SRC

for amd64:

#+BEGIN_SRC sh
  cd $GOROOT/src
  CGO_ENABLED=1 GOOS=windows GOARCH=amd64 CC_FOR_TARGET="x86_64-w64-mingw32-gcc -fno-stack-protector -D_FORTIFY_SOURCE=0 -lssp" ./make.bash --no-clean
#+END_SRC

*** for mac

just like *for linux*

** for arm

[[https://github.com/golang/go/wiki/GoArm][Referenced]]

[[http://dave.cheney.net/2012/09/08/an-introduction-to-cross-compilation-with-go][An introduction to cross compilation with Go]]

*** supported architectures

#+BEGIN_SRC kumakichi
Architecture	        Status	            GOARM value	            Notes
ARMv4 and below	    sorry, not supported	    n/a                  -  	
ARMv5	            supported	                GOARM=5              -
ARMv6	            supported	                 -                GOARM=6 is the default value
ARMv7	            supported	                GOARM=7              -  	
ARMv8	            work in progress	        n/a               contact aram for details
#+END_SRC

*** supported operating systems

Go supports ARM on Linux. You must be running a [[http://wiki.debian.org/ArmEabiPort][EABI]] kernel. These are generally known as *armel* for softfloat (compatible with ARMv5) or *armhf* for hardware floating point (ARMv6 and above).

*** compile

here is a example build for armv5 without cgo

#+BEGIN_SRC sh
  CGO_ENABLED=0 GOARM=5 GOOS=linux GOARCH=arm ./make.bash --no-clean
#+END_SRC

** more words for arm

*** normal

if you use *arm-linux-gnueabi-gcc*, just 

#+BEGIN_SRC sh
  CGO_ENABLED=1 GOARM=5 GOOS=linux GOARCH=arm CC_FOR_TARGET="arm-linux-gnueabi-gcc" ./make.bash
#+END_SRC

*** old tools

for me, i use *arm_v5t_le-gcc*, when i use

#+BEGIN_SRC sh
  CGO_ENABLED=1 GOARM=5 GOOS=linux GOARCH=arm CC_FOR_TARGET="arm_v5t_le-gcc" ./make.bash
#+END_SRC

come across this error infomation:

#+BEGIN_QUOTE
armv5tl-montavista-linux-gnueabi/bin/ld: unrecognized option '--build-id=none'
#+END_QUOTE

this is because the *ld* is too old, so i modified src/cmd/go/build.go

replace code snippet 

#+BEGIN_SRC go
  switch goos {
  case "android", "dragonfly", "linux", "netbsd":
      ldflags = append(ldflags, "-Wl,--build-id=none")
  }
#+END_SRC

with 

#+BEGIN_SRC sh
  case "android", "dragonfly", "linux", "netbsd":
      if !(goos == "linux" && goarch == "arm") {
          ldflags = append(ldflags, "-Wl,--build-id=none")
      }
  }
#+END_SRC

all ok now

because i use a seperate directory for arm 

#+BEGIN_SRC sh
  GOROOT=/var/virtual/go-arm CGO_ENABLED=1 GOARM=5 GOOS=linux GOARCH=arm CC_FOR_TARGET="arm_v5t_le-gcc" /var/virtual/go-arm/bin/go build demo.go
#+END_SRC

** build for target

here is a example build on Ubuntu for windows amd64

demo.go

#+BEGIN_SRC go
  package main
  
  /*
  #include <stdio.h>
  void callme(void)
  {
      int a = 1;
      a += 2;
      printf("%d\n", a);
  }
  ,*/
  import "C"
  import "fmt"
  
  func main() {
      fmt.Println("Hello world!")
      C.callme()
  }
#+END_SRC

#+BEGIN_SRC sh
  CGO_ENABLED=1 GOOS=windows GOARCH=386 CC="i686-w64-mingw32-gcc -fno-stack-protector -D_FORTIFY_SOURCE=0 -lssp" go build demo.go
  wine demo.exe
#+END_SRC

** build native code with cgo

after building a cross compile environment

ie. after building windows 386/amd64 on my host running Ubuntu

this way to build native code:

#+BEGIN_SRC sh
  CC=gcc go build
#+END_SRC
